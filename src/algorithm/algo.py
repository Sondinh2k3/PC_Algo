"""
L·ªõp ƒêi·ªÅu khi·ªÉn Chu vi Ph·∫£n h·ªìi (Perimeter Control)

T√°c gi·∫£: S∆°n ƒê√¨nh and ƒê·ª©c Ng√¥

MODIFIED: T√°ch bi·ªát logic c·ªßa b·ªô gi·∫£i (solver) sang module ri√™ng
v√† th√™m h√†m ch·∫°y th·ª≠ nghi·ªám (mock test).
"""

import time
from typing import Dict, Optional, Tuple

# Import c√°c th√†nh ph·∫ßn t·ª´ c√°c module kh√°c trong src
# S·ª≠a l·ªói import: B·ªè d·∫•u .. ƒë·ªÉ d√πng import tuy·ªát ƒë·ªëi t·ª´ src
from data.intersection_config_manager import IntersectionConfigManager
from algorithm.solver import solve_green_time_optimization

# === CONSTANTS ===
KP_H = 20.0        # Proportional gain (1/hour)
KI_H = 5.0         # Integral gain (1/hour)
N_HAT = 90.0      # Target accumulation (vehicles)
CONTROL_INTERVAL_S = 90  # Control interval (seconds)

class PerimeterController:
    """
    L·ªõp ƒëi·ªÅu khi·ªÉn chu vi ph·∫£n h·ªìi.
    Th·ª±c hi·ªán thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn d·ª±a tr√™n b·ªô ƒëi·ªÅu khi·ªÉn PI v√† ·ªßy quy·ªÅn
    vi·ªác gi·∫£i b√†i to√°n t·ªëi ∆∞u cho solver module.
    """
    
    def __init__(self, kp: float = KP_H, ki: float = KI_H, n_hat: float = N_HAT, 
                 config_file: str = "intersection_config.json", shared_dict: Optional[Dict] = None):
        """Kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn v·ªõi c√°c tham s·ªë c·∫ßn thi·∫øt"""
        # Chuy·ªÉn ƒë·ªïi t·ª´ ƒë∆°n v·ªã gi·ªù sang gi√¢y
        control_interval_h = CONTROL_INTERVAL_S / 3600.0
        self.kp = kp * control_interval_h
        self.ki = ki * control_interval_h
        self.n_hat = n_hat
        
        self.shared_dict = shared_dict
        self.is_active = False
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active
            self.shared_dict['green_times'] = {}

        self.activation_threshold = 0.85 * self.n_hat  
        self.deactivation_threshold = 0.70 * self.n_hat 

        # Load c·∫•u h√¨nh intersection t·ª´ JSON
        self.config_manager = IntersectionConfigManager(config_file)
        self.intersection_ids = self.config_manager.get_intersection_ids()
        
        # L∆∞u tr·ªØ gi√° tr·ªã tr∆∞·ªõc ƒë√≥ cho m·ªói intersection
        self.previous_green_times = {}
        for intersection_id in self.intersection_ids:
            intersection_data = self.config_manager.get_intersection_data(intersection_id)
            if intersection_data:
                cycle_length = intersection_data.get('cycle_length', 90)
                # Gi·∫£ s·ª≠ chia ƒë·ªÅu cho pha ch√≠nh v√† ph·ª• ban ƒë·∫ßu
                self.previous_green_times[intersection_id] = {
                    'main': cycle_length // 2,
                    'secondary': cycle_length // 2
                }
        
        if self.shared_dict is not None:
            self.shared_dict['green_times'] = self.previous_green_times

        print("üö¶ B·ªô ƒëi·ªÅu khi·ªÉn chu vi ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
        print(f"Ng∆∞·ª°ng k√≠ch ho·∫°t: n(k) > {self.activation_threshold:.0f} xe")
        print(f"Ng∆∞·ª°ng h·ªßy: n(k) < {self.deactivation_threshold:.0f} xe")
        print(f"Tham s·ªë: KP={kp:.1f} h‚Åª¬π, KI={ki:.1f} h‚Åª¬π")
        print(f"S·ªë intersection: {len(self.intersection_ids)}")

    def check_activation_status(self, n_k: float):
        """Ki·ªÉm tra xem c√≥ n√™n k√≠ch ho·∫°t hay h·ªßy b·ªô ƒëi·ªÅu khi·ªÉn"""
        if n_k > self.activation_threshold:
            if not self.is_active:
                print(f"K√çCH HO·∫†T ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} > {self.activation_threshold:.0f})")
            self.is_active = True
        elif n_k < self.deactivation_threshold:
            if self.is_active:
                print(f"H·ª¶Y ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} < {self.deactivation_threshold:.0f})")
            self.is_active = False
        
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active

    def calculate_target_inflow(self, n_k: float, n_k_minus_1: float, qg_k_minus_1: float) -> float:
        """
        B∆Ø·ªöC 2: T√≠nh to√°n l∆∞u l∆∞·ª£ng v√†o m·ª•c ti√™u (qg) b·∫±ng c√¥ng th·ª©c PI.
        """
        error = self.n_hat - n_k
        change_in_n = n_k - n_k_minus_1

        qg_k = qg_k_minus_1 - (self.kp / (CONTROL_INTERVAL_S / 3600.0)) * change_in_n + (self.ki / (CONTROL_INTERVAL_S / 3600.0)) * error
        
        print(f" Sai s·ªë: e(k) = {self.n_hat:.0f} - {n_k:.0f} = {error:.1f} xe")
        print(f" Thay ƒë·ªïi: Œîn(k) = {n_k:.0f} - {n_k_minus_1:.0f} = {change_in_n:.1f} xe")
        print(f" PI Output: qg(k) = {qg_k:.2f} xe/gi·ªù")
        
        return max(0, qg_k)  # ƒê·∫£m b·∫£o kh√¥ng √¢m

    def distribute_inflow_to_green_times(self, target_inflow: float, live_queue_lengths: Optional[Dict] = None):
        """
        B∆Ø·ªöC 3: G·ªçi b·ªô gi·∫£i ƒë·ªÉ ph√¢n b·ªï l∆∞u l∆∞·ª£ng m·ª•c ti√™u th√†nh th·ªùi gian ƒë√®n xanh.
        """
        # ·ª¶y quy·ªÅn vi·ªác gi·∫£i b√†i to√°n cho solver module
        result = solve_green_time_optimization(
            target_inflow=target_inflow,
            config_manager=self.config_manager,
            previous_green_times=self.previous_green_times,
            live_queue_lengths=live_queue_lengths
        )
        
        if result:
            print(f"  Th·ªùi gian ƒë√®n xanh m·ªõi:")
            total_inflow = 0
            new_green_times = {}

            for intersection_id in self.intersection_ids:
                G_main = result['variables'][f'G_{intersection_id}_main']
                G_secondary = result['variables'][f'G_{intersection_id}_secondary']
                
                new_green_times[intersection_id] = {
                    'main': int(G_main),
                    'secondary': int(G_secondary)
                }

                # T√≠nh l∆∞u l∆∞·ª£ng v√†o d·ª± ki·∫øn ƒë·ªÉ hi·ªÉn th·ªã
                saturation_flows = self.config_manager.get_saturation_flows(intersection_id)
                turn_in_ratios = self.config_manager.get_turn_in_ratios(intersection_id)
                inflow_main = (G_main * saturation_flows['main'] * turn_in_ratios['main'])
                total_inflow += inflow_main
                
                print(f"   {intersection_id}: G_main={G_main:.0f}s, G_secondary={G_secondary:.0f}s, inflow={inflow_main:.1f} xe/chu k·ª≥")
            
            # C·∫≠p nh·∫≠t gi√° tr·ªã cho chu k·ª≥ ti·∫øp theo
            self.previous_green_times = new_green_times
            if self.shared_dict is not None:
                self.shared_dict['green_times'] = new_green_times

            print(f"  T·ªïng l∆∞u l∆∞·ª£ng d·ª± ki·∫øn: {total_inflow:.2f} xe/chu k·ª≥")
        else:
            print("  Kh√¥ng t√¨m ƒë∆∞·ª£c nghi·ªám t·ªëi ∆∞u, gi·ªØ nguy√™n th·ªùi gian ƒë√®n xanh.")

    def run_simulation_step(self, n_current: float, n_previous: float, qg_previous: float, live_queue_lengths: Optional[Dict] = None) -> Tuple[float, float, bool]:
        """
        Ch·∫°y m·ªôt b∆∞·ªõc ƒëi·ªÅu khi·ªÉn chu vi (1 v√≤ng l·∫∑p).
        Tr·∫£ v·ªÅ (n_current, qg_new, controller_active).
        """
        print(f"\n{'='*60}")
        print(f"üîç B∆Ø·ªöC 1: ƒêo l∆∞·ªùng - Tr·∫°ng th√°i hi·ªán t·∫°i: n(k) = {n_current:.0f} xe")

        self.check_activation_status(n_current)

        if not self.is_active:
            print("M·ª•c ti√™u ƒë√£ ƒë·∫°t ƒë∆∞·ª£c. B·ªô ƒëi·ªÅu khi·ªÉn kh√¥ng ho·∫°t ƒë·ªông.")
            print(f"{ '='*60}\n")
            return n_current, qg_previous, False

        print(f" B∆Ø·ªöC 2: T√≠nh to√°n l∆∞u l∆∞·ª£ng m·ª•c ti√™u qg")
        qg_new = self.calculate_target_inflow(
            n_k=n_current,
            n_k_minus_1=n_previous,
            qg_k_minus_1=qg_previous
        )

        print(f" B∆Ø·ªöC 3: Ph√¢n b·ªï th√†nh th·ªùi gian ƒë√®n xanh")
        self.distribute_inflow_to_green_times(qg_new, live_queue_lengths)
        
        print(f"{ '='*60}\n")
        return n_current, qg_new, True

def run_perimeter_control_mock_test():
    """
    Ch·∫°y m√¥ ph·ªèng th·ª≠ nghi·ªám cho b·ªô ƒëi·ªÅu khi·ªÉn chu vi v·ªõi d·ªØ li·ªáu gi·∫£ l·∫≠p.
    H√†m n√†y d√πng ƒë·ªÉ ki·ªÉm tra nhanh logic c·ªßa thu·∫≠t to√°n m√† kh√¥ng c·∫ßn SUMO.
    """
    print("üö¶ B·∫ÆT ƒê·∫¶U M√î PH·ªéNG TH·ª¨ NGHI·ªÜM (MOCK TEST)")
    print("="*70)
    
    # Kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn
    try:
        # Gi·∫£ ƒë·ªãnh file c·∫•u h√¨nh n·∫±m trong th∆∞ m·ª•c src
        controller = PerimeterController(config_file="src/intersection_config.json")
    except FileNotFoundError:
        print("\n[L·ªñI] Kh√¥ng t√¨m th·∫•y file 'src/intersection_config.json'.")
        return
    
    # D·ªØ li·ªáu m√¥ ph·ªèng: t√¨nh hu·ªëng t·∫Øc ngh·∫Ωn d·∫ßn tƒÉng r·ªìi gi·∫£m
    simulation_data = [
        {'step': 1, 'n_k': 100, 'description': 'Giao th√¥ng b√¨nh th∆∞·ªùng'},
        {'step': 2, 'n_k': 120, 'description': 'L∆∞u l∆∞·ª£ng tƒÉng nh·∫π'},
        {'step': 3, 'n_k': 140, 'description': 'G·∫ßn ng∆∞·ª°ng k√≠ch ho·∫°t'},
        {'step': 4, 'n_k': 160, 'description': 'V∆∞·ª£t ng∆∞·ª°ng - K√≠ch ho·∫°t ƒëi·ªÅu khi·ªÉn'},
        {'step': 5, 'n_k': 170, 'description': 'T√¨nh tr·∫°ng t·∫Øc ngh·∫Ωn'},
        {'step': 6, 'n_k': 165, 'description': 'B·∫Øt ƒë·∫ßu c·∫£i thi·ªán'},
        {'step': 7, 'n_k': 140, 'description': 'Ti·∫øp t·ª•c gi·∫£m'},
        {'step': 8, 'n_k': 110, 'description': 'D∆∞·ªõi ng∆∞·ª°ng h·ªßy - T·∫Øt ƒëi·ªÅu khi·ªÉn'},
        {'step': 9, 'n_k': 95, 'description': 'Tr·ªü l·∫°i b√¨nh th∆∞·ªùng'},
    ]
    
    # Kh·ªüi t·∫°o tr·∫°ng th√°i
    n_previous = 100.0
    qg_previous = 200.0  # xe/gi·ªù
    
    print(f"\n TH√îNG TIN M√î PH·ªéNG:")
    print(f"   ‚Ä¢ Ng∆∞·ª°ng m·ª•c ti√™u nÃÇ: {N_HAT} xe")
    print(f"   ‚Ä¢ Kho·∫£ng ƒëi·ªÅu khi·ªÉn: {CONTROL_INTERVAL_S}s")
    print(f"   ‚Ä¢ S·ªë b∆∞·ªõc m√¥ ph·ªèng: {len(simulation_data)} b∆∞·ªõc")
    print("\n" + "="*70)
    
    # Ch·∫°y m√¥ ph·ªèng
    for data in simulation_data:
        step = data['step']
        n_current = data['n_k']
        description = data['description']
        
        print(f"\n CHU K·ª≤ {step}: {description}")
        
        n_result, qg_result, active = controller.run_simulation_step(
            n_current, n_previous, qg_previous
        )
        
        # C·∫≠p nh·∫≠t cho chu k·ª≥ ti·∫øp theo
        n_previous = n_current
        qg_previous = qg_result
        
        time.sleep(0.5) # Th√™m delay nh·ªè ƒë·ªÉ quan s√°t
    
    print(" K·∫æT TH√öC M√î PH·ªéNG TH·ª¨ NGHI·ªÜM")
    print("="*70)