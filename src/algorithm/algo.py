"""
H·ªá th·ªëng ƒêi·ªÅu khi·ªÉn Chu vi Ph·∫£n h·ªìi (Perimeter Control) ho√†n ch·ªânh
S·ª≠ d·ª•ng Google OR-Tools ƒë·ªÉ gi·∫£i b√†i to√°n MIQP

T√°c gi·∫£: S∆°n ƒê√¨nh and ƒê·ª©c Ng√¥

MODIFIED: T√≠ch h·ª£p b·ªô gi·∫£i PySCIPOpt cho b√†i to√°n MIQP phi tuy·∫øn th·ª±c s·ª±
trong khi v·∫´n gi·ªØ l·∫°i MIQPSolver cho c√°c b√†i to√°n tuy·∫øn t√≠nh.
"""

import time
from ortools.linear_solver import pywraplp
from ortools.sat.python import cp_model
import numpy as np
from typing import Dict, List, Tuple, Optional, Union
from enum import Enum
import sys
import os

# Import th∆∞ vi·ªán m·ªõi ƒë·ªÉ gi·∫£i MIQP phi tuy·∫øn
from pyscipopt import Model, quicksum
from pyscipopt.recipes.nonlinear import set_nonlinear_objective

# Add project root to system path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
sys.path.append(project_root)
print(project_root)

# Import config manager
from src.data.intersection_config_manager import IntersectionConfigManager

# === CONSTANTS ===
KP_H = 20.0        # Proportional gain (1/hour)
KI_H = 5.0         # Integral gain (1/hour)
N_HAT = 80.0      # Target accumulation (vehicles)
CONTROL_INTERVAL_S = 90  # Control interval (seconds)
KP_MIN = 0.0
KP_MAX = 0.0
KI_MIN = 100.0
KI_MAX = 20.0

class VariableType(Enum):
    """Lo·∫°i bi·∫øn"""
    CONTINUOUS = "continuous"
    INTEGER = "integer"
    BINARY = "binary"

class ObjectiveType(Enum):
    """Lo·∫°i m·ª•c ti√™u"""
    MINIMIZE = "minimize"
    MAXIMIZE = "maximize"

class SolverStatus:
    """Tr·∫°ng th√°i gi·∫£i"""
    OPTIMAL = "optimal"
    FEASIBLE = "feasible"
    INFEASIBLE = "infeasible"
    UNBOUNDED = "unbounded"
    UNKNOWN = "unknown"
    ERROR = "error"

class PerimeterController:
    """
    L·ªõp ƒëi·ªÅu khi·ªÉn chu vi ph·∫£n h·ªìi ho√†n ch·ªânh
    Th·ª±c hi·ªán thu·∫≠t to√°n ƒëi·ªÅu khi·ªÉn d·ª±a tr√™n b·ªô ƒëi·ªÅu khi·ªÉn PI
    """
    
    def __init__(self, kp: float = KP_H, ki: float = KI_H, n_hat: float = N_HAT, 
                 config_file: str = "intersection_config.json", shared_dict: Optional[Dict] = None):
        """Kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn v·ªõi c√°c tham s·ªë c·∫ßn thi·∫øt"""
        # Chuy·ªÉn ƒë·ªïi t·ª´ ƒë∆°n v·ªã gi·ªù sang gi√¢y
        control_interval_h = CONTROL_INTERVAL_S / 3600.0
        self.kp = kp * control_interval_h
        self.ki = ki * control_interval_h
        self.n_hat = n_hat
        
        self.shared_dict = shared_dict
        self.is_active = False
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active
            self.shared_dict['green_times'] = {}

        self.activation_threshold = 0.85 * self.n_hat  
        self.deactivation_threshold = 0.70 * self.n_hat 

        # Load c·∫•u h√¨nh intersection t·ª´ JSON
        self.config_manager = IntersectionConfigManager(config_file)
        self.intersection_ids = self.config_manager.get_intersection_ids()
        self.global_params = self.config_manager.get_global_params()
        
        # L∆∞u tr·ªØ gi√° tr·ªã tr∆∞·ªõc ƒë√≥ cho m·ªói intersection
        self.previous_green_times = {}
        for intersection_id in self.intersection_ids:
            intersection_data = self.config_manager.get_intersection_data(intersection_id)
            if intersection_data:
                cycle_length = intersection_data.get('cycle_length', 90)
                # Gi·∫£ s·ª≠ chia ƒë·ªÅu cho pha ch√≠nh v√† ph·ª•
                self.previous_green_times[intersection_id] = {
                    'main': cycle_length // 2,
                    'secondary': cycle_length // 2
                }
        
        if self.shared_dict is not None:
            self.shared_dict['green_times'] = self.previous_green_times


        print("üö¶ B·ªô ƒëi·ªÅu khi·ªÉn chu vi ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.")
        print(f"Ng∆∞·ª°ng k√≠ch ho·∫°t: n(k) > {self.activation_threshold:.0f} xe")
        print(f"Ng∆∞·ª°ng h·ªßy: n(k) < {self.deactivation_threshold:.0f} xe")
        print(f"Tham s·ªë: KP={kp:.1f} h‚Åª¬π, KI={ki:.1f} h‚Åª¬π")
        print(f"S·ªë intersection: {len(self.intersection_ids)}")
        print(f"Intersection IDs: {self.intersection_ids}")

    def check_activation_status(self, n_k: float):
        """Ki·ªÉm tra xem c√≥ n√™n k√≠ch ho·∫°t hay h·ªßy b·ªô ƒëi·ªÅu khi·ªÉn"""
        if n_k > self.activation_threshold:
            if not self.is_active:
                print(f"K√çCH HO·∫†T ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} > {self.activation_threshold:.0f})")
            self.is_active = True
        elif n_k < self.deactivation_threshold:
            if self.is_active:
                print(f"H·ª¶Y ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} < {self.deactivation_threshold:.0f})")
            self.is_active = False
        
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active

    def calculate_target_inflow(self, n_k: float, n_k_minus_1: float, qg_k_minus_1: float) -> float:
        """
        B∆Ø·ªöC 2: T√≠nh to√°n l∆∞u l∆∞·ª£ng v√†o m·ª•c ti√™u (qg) b·∫±ng c√¥ng th·ª©c PI
        qg(k) = qg(k-1) - Kp[n(k) - n(k-1)] + Ki[n_hat - n(k)]
        ƒê∆°n v·ªã c·ªßa qg(k) l√† [xe/gi√¢y] - sau khi ƒë√£ nh√¢n v·ªõi control_interval_h
        """
        error = self.n_hat - n_k
        change_in_n = n_k - n_k_minus_1

        # L∆∞u √Ω: self.kp v√† self.ki ƒë√£ ƒë∆∞·ª£c nh√¢n v·ªõi control_interval_h
        # n√™n k·∫øt qu·∫£ qg_k v·∫´n gi·ªØ nguy√™n ƒë∆°n v·ªã c·ªßa qg_k_minus_1 (xe/gi·ªù)
        qg_k = qg_k_minus_1 - (self.kp / (CONTROL_INTERVAL_S / 3600.0)) * change_in_n + (self.ki / (CONTROL_INTERVAL_S / 3600.0)) * error
        
        print(f" Sai s·ªë: e(k) = {self.n_hat:.0f} - {n_k:.0f} = {error:.1f} xe")
        print(f" Thay ƒë·ªïi: Œîn(k) = {n_k:.0f} - {n_k_minus_1:.0f} = {change_in_n:.1f} xe")
        print(f" PI Output: qg(k) = {qg_k:.2f} xe/gi·ªù")
        
        return max(0, qg_k)  # ƒê·∫£m b·∫£o kh√¥ng √¢m

    def solve_optimization_problem(self, target_inflow: float, live_queue_lengths: Optional[Dict] = None) -> Optional[Dict]:
        """
        B∆Ø·ªöC 3: Gi·∫£i b√†i to√°n t·ªëi ∆∞u h√≥a ƒë·ªÉ chuy·ªÉn ƒë·ªïi qg th√†nh th·ªùi gian ƒë√®n xanh
        S·ª¨ D·ª§NG PYSCIPOPT ƒê·ªÇ GI·∫¢I B√ÄI TO√ÅN MIQP PHI TUY·∫æN
        """
        # Chuy·ªÉn ƒë·ªïi t·ª´ xe/gi·ªù sang xe/chu k·ª≥ ƒë√®n
        cycle_length = self.global_params['default_cycle_length']
        qg_prime = target_inflow * cycle_length / 3600.0
        
        print(f"üîß Gi·∫£i b√†i to√°n MIQP v·ªõi m·ª•c ti√™u qg = {target_inflow:.2f} [xe/gi·ªù]")
        print(f"   (T∆∞∆°ng ƒë∆∞∆°ng {qg_prime:.2f} [xe / chu k·ª≥ ƒë√®n {cycle_length}s])")

        model = Model("MIQP_PerimeterControl")

        # L·∫•y tham s·ªë t·ª´ config manager
        theta_1 = self.global_params['theta_1']
        theta_2 = self.global_params['theta_2']
        min_green = self.global_params['min_green_time']
        max_change = self.global_params['max_change']

        # Th√™m bi·∫øn quy·∫øt ƒë·ªãnh G_main v√† G_secondary
        G_vars = {}
        for int_id in self.intersection_ids:
            max_green = self.config_manager.get_cycle_length(int_id) - min_green
            G_main = model.addVar(f'G_{int_id}_main', vtype='INTEGER', lb=min_green, ub=max_green)
            G_sec = model.addVar(f'G_{int_id}_secondary', vtype='INTEGER', lb=min_green, ub=max_green)
            G_vars[int_id] = {'main': G_main, 'secondary': G_sec}

        # Th√™m r√†ng bu·ªôc
        for int_id in self.intersection_ids:
            # R√†ng bu·ªôc 1: T·ªïng th·ªùi gian xanh = chu k·ª≥ ƒë√®n
            current_cycle = self.config_manager.get_cycle_length(int_id)
            model.addCons(G_vars[int_id]['main'] + G_vars[int_id]['secondary'] == current_cycle, f"cons_cycle_{int_id}")

            # R√†ng bu·ªôc 2: Gi·ªõi h·∫°n thay ƒë·ªïi so v·ªõi chu k·ª≥ tr∆∞·ªõc
            prev_main = self.previous_green_times[int_id]['main']
            prev_sec = self.previous_green_times[int_id]['secondary']
            model.addCons(G_vars[int_id]['main'] >= prev_main - max_change, f"cons_G_main_min_{int_id}")
            model.addCons(G_vars[int_id]['main'] <= prev_main + max_change, f"cons_G_main_max_{int_id}")
            model.addCons(G_vars[int_id]['secondary'] >= prev_sec - max_change, f"cons_G_sec_min_{int_id}")
            model.addCons(G_vars[int_id]['secondary'] <= prev_sec + max_change, f"cons_G_sec_max_{int_id}")

        # X√¢y d·ª±ng h√†m m·ª•c ti√™u phi tuy·∫øn
        # Th√†nh ph·∫ßn 1: T·ªëi thi·ªÉu h√≥a ƒë·ªô l·ªách so v·ªõi l∆∞u l∆∞·ª£ng m·ª•c ti√™u
        inflow_expr = quicksum(
            G_vars[int_id]['main'] * self.config_manager.get_saturation_flows(int_id)['main'] * self.config_manager.get_turn_in_ratios(int_id)['main']
            for int_id in self.intersection_ids
        )
        deviation = inflow_expr - qg_prime
        first_component = theta_1 * (deviation**2)

        # Th√†nh ph·∫ßn 2: T·ªëi ƒëa h√≥a vi·ªác s·ª≠ d·ª•ng ƒë√®n xanh (d·ª±a tr√™n h√†ng ƒë·ª£i)
        utilization_expr = quicksum(
            (1 - (G_vars[int_id]['main'] * self.config_manager.get_saturation_flows(int_id)['main']) / 
                ((live_queue_lengths[int_id]['main'] if live_queue_lengths and int_id in live_queue_lengths else self.config_manager.get_queue_lengths(int_id)['main']) + 1))**2 +
            (1 - (G_vars[int_id]['secondary'] * self.config_manager.get_saturation_flows(int_id)['secondary']) / 
                ((live_queue_lengths[int_id]['secondary'] if live_queue_lengths and int_id in live_queue_lengths else self.config_manager.get_queue_lengths(int_id)['secondary']) + 1))**2
            for int_id in self.intersection_ids
        )
        second_component = theta_2 * utilization_expr

        # Thi·∫øt l·∫≠p m·ª•c ti√™u cho model
        # set_nonlinear_objective(model, first_component + second_component, "minimize")
        model.setObjective(first_component + second_component, "minimize")

        # Gi·∫£i b√†i to√°n
        model.hideOutput()
        model.optimize()

        # X·ª≠ l√Ω k·∫øt qu·∫£
        if model.getStatus() == "optimal":
            print(f"  T√¨m ƒë∆∞·ª£c nghi·ªám: {model.getStatus()}")
            result = {
                'status': SolverStatus.OPTIMAL,
                'objective_value': model.getObjVal(),
                'variables': {var.name: model.getVal(var) for var in model.getVars()}
            }
            
            # C·∫≠p nh·∫≠t gi√° tr·ªã tr∆∞·ªõc ƒë√≥
            new_green_times = {}
            for int_id in self.intersection_ids:
                new_green_times[int_id] = {
                    'main': int(result['variables'][f'G_{int_id}_main']),
                    'secondary': int(result['variables'][f'G_{int_id}_secondary'])
                }
            self.previous_green_times = new_green_times
            
            # C·∫≠p nh·∫≠t shared_dict n·∫øu c√≥
            if self.shared_dict is not None:
                self.shared_dict['green_times'] = new_green_times

            return result
        else:
            print(f"  Kh√¥ng t√¨m ƒë∆∞·ª£c nghi·ªám: {model.getStatus()}")
            return None

    def distribute_inflow_to_green_times(self, target_inflow: float, live_queue_lengths: Optional[Dict] = None):
        """Ph√¢n b·ªï l∆∞u l∆∞·ª£ng m·ª•c ti√™u th√†nh th·ªùi gian ƒë√®n xanh"""
        result = self.solve_optimization_problem(target_inflow, live_queue_lengths)
        
        if result:
            print(f"  Th·ªùi gian ƒë√®n xanh m·ªõi:")
            total_inflow = 0
            
            for intersection_id in self.intersection_ids:
                G_main = result['variables'][f'G_{intersection_id}_main']
                G_secondary = result['variables'][f'G_{intersection_id}_secondary']
                
                # T√≠nh l∆∞u l∆∞·ª£ng v√†o d·ª± ki·∫øn
                saturation_flows = self.config_manager.get_saturation_flows(intersection_id)
                turn_in_ratios = self.config_manager.get_turn_in_ratios(intersection_id)
                
                inflow_main = (G_main * saturation_flows['main'] * turn_in_ratios['main'])
                total_inflow += inflow_main
                
                print(f"   {intersection_id}: G_main={G_main:.0f}s, G_secondary={G_secondary:.0f}s, inflow={inflow_main:.1f} xe/chu k·ª≥")
            
            print(f"  T·ªïng l∆∞u l∆∞·ª£ng d·ª± ki·∫øn: {total_inflow:.2f} xe/chu k·ª≥")
            return result
        
        return None

    def run_simulation_step(self, n_current: float, n_previous: float, qg_previous: float, live_queue_lengths: Optional[Dict] = None) -> Tuple[float, float, bool]:
        """
        Ch·∫°y m·ªôt b∆∞·ªõc ƒëi·ªÅu khi·ªÉn chu vi (1 v√≤ng l·∫∑p)
        Tr·∫£ v·ªÅ (n_current, qg_new, controller_active)
        """
        print(f"\n{'='*60}")
        print(f"üîç B∆Ø·ªöC 1: ƒêo l∆∞·ªùng - Tr·∫°ng th√°i hi·ªán t·∫°i: n(k) = {n_current:.0f} xe")

        self.check_activation_status(n_current)

        if not self.is_active:
            print("M·ª•c ti√™u ƒë√£ ƒë·∫°t ƒë∆∞·ª£c. B·ªô ƒëi·ªÅu khi·ªÉn kh√¥ng ho·∫°t ƒë·ªông.")
            print(f"{ '='*60}\n")
            return n_current, qg_previous, False

        print(f" B∆Ø·ªöC 2: T√≠nh to√°n l∆∞u l∆∞·ª£ng m·ª•c ti√™u qg")
        qg_new = self.calculate_target_inflow(
            n_k=n_current,
            n_k_minus_1=n_previous,
            qg_k_minus_1=qg_previous
        )

        print(f" B∆Ø·ªöC 3: Ph√¢n b·ªï th√†nh th·ªùi gian ƒë√®n xanh")
        self.distribute_inflow_to_green_times(qg_new, live_queue_lengths)
        
        print(f"{ '='*60}\n")
        return n_current, qg_new, True

def simulate_perimeter_control():
    """
    M√¥ ph·ªèng ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng ƒëi·ªÅu khi·ªÉn chu vi
    """
    print("üö¶ B·∫ÆT ƒê·∫¶U M√î PH·ªéNG H·ªÜ TH·ªêNG ƒêI·ªÄU KHI·ªÇN CHU VI")
    print("="*70)
    
    # Kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn
    # Gi·∫£ ƒë·ªãnh file "intersection_config.json" t·ªìn t·∫°i v√† h·ª£p l·ªá
    try:
        controller = PerimeterController(config_file="intersection_config.json")
    except FileNotFoundError:
        print("\n[L·ªñI] Kh√¥ng t√¨m th·∫•y file 'intersection_config.json'.")
        print("Vui l√≤ng ƒë·∫£m b·∫£o file c·∫•u h√¨nh t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c.")
        return
    
    # D·ªØ li·ªáu m√¥ ph·ªèng: t√¨nh hu·ªëng t·∫Øc ngh·∫Ωn d·∫ßn tƒÉng r·ªìi gi·∫£m
    simulation_data = [
        {'step': 1, 'n_k': 100, 'description': 'Giao th√¥ng b√¨nh th∆∞·ªùng'},
        {'step': 2, 'n_k': 120, 'description': 'L∆∞u l∆∞·ª£ng tƒÉng nh·∫π'}, 
        {'step': 3, 'n_k': 140, 'description': 'G·∫ßn ng∆∞·ª°ng k√≠ch ho·∫°t'},
        {'step': 4, 'n_k': 160, 'description': 'V∆∞·ª£t ng∆∞·ª°ng - K√≠ch ho·∫°t ƒëi·ªÅu khi·ªÉn'},
        {'step': 5, 'n_k': 170, 'description': 'T√¨nh tr·∫°ng t·∫Øc ngh·∫Ωn'},
        {'step': 6, 'n_k': 165, 'description': 'B·∫Øt ƒë·∫ßu c·∫£i thi·ªán'},
        {'step': 7, 'n_k': 140, 'description': 'Ti·∫øp t·ª•c gi·∫£m'},
        {'step': 8, 'n_k': 110, 'description': 'D∆∞·ªõi ng∆∞·ª°ng h·ªßy - T·∫Øt ƒëi·ªÅu khi·ªÉn'},
        {'step': 9, 'n_k': 95, 'description': 'Tr·ªü l·∫°i b√¨nh th∆∞·ªùng'},
    ]
    
    # Kh·ªüi t·∫°o tr·∫°ng th√°i
    n_previous = 100.0
    qg_previous = 200.0  # xe/gi·ªù
    
    print(f"\n TH√îNG TIN M√î PH·ªéNG:")
    print(f"   ‚Ä¢ Ng∆∞·ª°ng m·ª•c ti√™u nÃÇ: {N_HAT} xe")
    print(f"   ‚Ä¢ Kho·∫£ng ƒëi·ªÅu khi·ªÉn: {CONTROL_INTERVAL_S}s")
    print(f"   ‚Ä¢ S·ªë b∆∞·ªõc m√¥ ph·ªèng: {len(simulation_data)} b∆∞·ªõc")
    print("\n" + "="*70)
    
    # Ch·∫°y m√¥ ph·ªèng
    for data in simulation_data:
        step = data['step']
        n_current = data['n_k']
        description = data['description']
        
        print(f"\n CHU K·ª≤ {step}: {description}")
        
        n_result, qg_result, active = controller.run_simulation_step(
            n_current, n_previous, qg_previous
        )
        
        # C·∫≠p nh·∫≠t cho chu k·ª≥ ti·∫øp theo
        n_previous = n_current
        qg_previous = qg_result
        
        # Th√™m delay ƒë·ªÉ quan s√°t (c√≥ th·ªÉ b·ªè trong th·ª±c t·∫ø)
        time.sleep(1)
    
    print(" K·∫æT TH√öC M√î PH·ªéNG")
    print("="*70)

def example_simple_optimization():
    """V√≠ d·ª• ƒë∆°n gi·∫£n s·ª≠ d·ª•ng MIQPSolver (KH√îNG THAY ƒê·ªîI)"""
    print("\n" + "="*50)
    print(" V√ç D·ª§ ƒê∆°n GI·∫¢N - S·ª¨ D·ª§NG MIQPSolver")
    print("="*50)
    
    solver = MIQPSolver('SCIP')
    
    # Th√™m bi·∫øn
    solver.add_variable('x', VariableType.CONTINUOUS, 0, 10)
    solver.add_variable('y', VariableType.INTEGER, 0, 5)
    
    # Th√™m r√†ng bu·ªôc: x + 2y <= 10
    solver.add_constraint({'x': 1, 'y': 2}, '<=', 10)
    
    # M·ª•c ti√™u: minimize 3x - y
    solver.set_objective_linear({'x': 3, 'y': -1}, ObjectiveType.MINIMIZE)
    
    # Gi·∫£i v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    result = solver.solve()
    solver.print_solution(result)


if __name__ == "__main__":
    # Ch·∫°y m√¥ ph·ªèng h·ªá th·ªëng ƒëi·ªÅu khi·ªÉn chu vi ch√≠nh
    simulate_perimeter_control()
    
    # Ch·∫°y v√≠ d·ª• ƒë∆°n gi·∫£n
    example_simple_optimization()
