"""
L·ªõp ƒêi·ªÅu khi·ªÉn Chu vi Ph·∫£n h·ªìi (Perimeter Control)

T√°c gi·∫£: S∆°n ƒê√¨nh and ƒê·ª©c Ng√¥

MODIFIED: T√°ch bi·ªát logic c·ªßa b·ªô gi·∫£i (solver) sang module ri√™ng,
th√™m h√†m ch·∫°y th·ª≠ nghi·ªám (mock test), v√† h·ªó tr·ª£ nhi·ªÅu pha ph·ª•.
"""

import time
import os
import sys
from typing import Dict, Optional, Tuple

# Th√™m project root v√†o sys.path ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ import
# sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from data.intersection_config_manager import IntersectionConfigManager
from algorithm.solver import solve_green_time_optimization

# === CONSTANTS ===
KP_H = 37.45
KI_H = 19.01
N_HAT = 75.0
CONTROL_INTERVAL_S = 90

class PerimeterController:
    """
    L·ªõp ƒëi·ªÅu khi·ªÉn chu vi ph·∫£n h·ªìi.
    """
    
    def __init__(self, kp: float = KP_H, ki: float = KI_H, n_hat: float = N_HAT, 
                 config_file: str = "src/intersection_config.json", shared_dict: Optional[Dict] = None,
                 control_interval_s: int = CONTROL_INTERVAL_S):
        control_interval_h = control_interval_s / 3600.0
        self.kp = kp * control_interval_h
        self.ki = ki * control_interval_h
        self.n_hat = n_hat
        
        self.shared_dict = shared_dict
        self.is_active = False

        self.activation_threshold = 0.85 * self.n_hat
        self.deactivation_threshold = 0.70 * self.n_hat

        self.config_manager = IntersectionConfigManager(config_file)
        self.intersection_ids = self.config_manager.get_intersection_ids()
        
        self.previous_green_times = {}
        for int_id in self.intersection_ids:
            tl_id = self.config_manager.get_traffic_light_id(int_id)
            if not tl_id:
                print(f"Warning: No traffic_light_id found for intersection {int_id}. Skipping initialization for this intersection.")
                continue

            traffic_light_phases = self.config_manager.config_data.get('traffic_lights', {}).get(tl_id, {}).get('phases', [])
            phase_info = self.config_manager.get_phase_info(int_id)

            if not traffic_light_phases or not phase_info: 
                print(f"Warning: No phase info found for traffic light {tl_id} or intersection {int_id}. Skipping initialization for this intersection.")
                continue

            main_phase_duration = 0
            if 'p' in phase_info and 'phase_indices' in phase_info['p']:
                main_phase_index = phase_info['p']['phase_indices'][0]
                if 0 <= main_phase_index < len(traffic_light_phases):
                    main_phase_duration = int(traffic_light_phases[main_phase_index].get('duration', 0))

            secondary_phase_durations = []
            if 's' in phase_info:
                for s_phase_config in phase_info['s']:
                    if 'phase_indices' in s_phase_config:
                        s_phase_index = s_phase_config['phase_indices'][0]
                        if 0 <= s_phase_index < len(traffic_light_phases):
                            secondary_phase_durations.append(int(traffic_light_phases[s_phase_index].get('duration', 0)))

            self.previous_green_times[int_id] = {
                'p': main_phase_duration,
                's': secondary_phase_durations
            }
        
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active
            self.shared_dict['green_times'] = self.previous_green_times

        print("üö¶B·ªô ƒëi·ªÅu khi·ªÉn chu vi ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o (h·ªó tr·ª£ nhi·ªÅu pha ph·ª•).")
        print(f"Ng∆∞·ª°ng k√≠ch ho·∫°t: n(k) > {self.activation_threshold:.0f} xe")
        print(f"Ng∆∞·ª°ng h·ªßy: n(k) < {self.deactivation_threshold:.0f} xe")
        print(f"S·ªë intersection: {len(self.intersection_ids)}")

    def check_activation_status(self, n_k: float):
        if n_k > self.activation_threshold:
            if not self.is_active:
                print(f"K√çCH HO·∫†T ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} > {self.activation_threshold:.0f})")
            self.is_active = True
        elif n_k < self.deactivation_threshold:
            if self.is_active:
                print(f"H·ª¶Y ƒêI·ªÄU KHI·ªÇN CHU VI (n(k)={n_k:.0f} < {self.deactivation_threshold:.0f})")
            self.is_active = False
        
        if self.shared_dict is not None:
            self.shared_dict['is_active'] = self.is_active

    def calculate_target_inflow(self, n_k: float, n_k_minus_1: float, qg_k_minus_1: float) -> float:
        error = self.n_hat - n_k
        change_in_n = n_k - n_k_minus_1
        qg_k = qg_k_minus_1 - (self.kp / (CONTROL_INTERVAL_S / 3600.0)) * change_in_n + (self.ki / (CONTROL_INTERVAL_S / 3600.0)) * error
        print(f" Sai s·ªë: e(k) = {self.n_hat:.0f} - {n_k:.0f} = {error:.1f} xe")
        print(f" Thay ƒë·ªïi: Œîn(k) = {n_k:.0f} - {n_k_minus_1:.0f} = {change_in_n:.1f} xe")
        print(f" PI Output: qg(k) = {qg_k:.2f} xe/gi·ªù")
        return max(0, qg_k)

    def distribute_inflow_to_green_times(self, target_inflow: float, live_queue_lengths: Optional[Dict] = None):
        result = solve_green_time_optimization(
            target_inflow=target_inflow,
            config_manager=self.config_manager,
            previous_green_times=self.previous_green_times,
            live_queue_lengths=live_queue_lengths
        )
        
        if result:
            print(f"  Th·ªùi gian ƒë√®n xanh m·ªõi:")
            total_inflow = 0
            new_green_times = {}

            for int_id in self.intersection_ids:
                phase_info = self.config_manager.get_phase_info(int_id)
                if not phase_info: continue

                G_p = result['variables'][f'G_{int_id}_p']
                new_green_times[int_id] = {'p': int(G_p), 's': []}

                inflow_p = (G_p * phase_info['p']['saturation_flow'] * phase_info['p']['turn_in_ratio'])
                total_inflow += inflow_p
                print(f"   {int_id}: G_p={G_p:.0f}s, inflow={inflow_p:.1f} xe/chu k·ª≥")

                if 's' in phase_info:
                    for i, _ in enumerate(phase_info['s']):
                        G_s = result['variables'][f'G_{int_id}_s_{i}']
                        new_green_times[int_id]['s'].append(int(G_s))
                        print(f"     ‚îî‚îÄ G_s{i}={G_s:.0f}s")
            
            self.previous_green_times = new_green_times
            if self.shared_dict is not None:
                self.shared_dict['green_times'] = new_green_times

            print(f"  T·ªïng l∆∞u l∆∞·ª£ng d·ª± ki·∫øn (t·ª´ c√°c pha ch√≠nh): {total_inflow:.2f} xe/chu k·ª≥")
        else:
            print("  Kh√¥ng t√¨m ƒë∆∞·ª£c nghi·ªám t·ªëi ∆∞u, gi·ªØ nguy√™n th·ªùi gian ƒë√®n xanh.")

    def run_simulation_step(self, n_current: float, n_previous: float, qg_previous: float, live_queue_lengths: Optional[Dict] = None) -> Tuple[float, float, bool]:
        print(f"\n{'='*60}")
        print(f"üîç B∆Ø·ªöC 1: ƒêo l∆∞·ªùng - Tr·∫°ng th√°i hi·ªán t·∫°i: n(k) = {n_current:.0f} xe")
        self.check_activation_status(n_current)

        if not self.is_active:
            print("M·ª•c ti√™u ƒë√£ ƒë·∫°t ƒë∆∞·ª£c. B·ªô ƒëi·ªÅu khi·ªÉn kh√¥ng ho·∫°t ƒë·ªông.")
            print(f"{ '='*60}\n")
            return n_current, qg_previous, False

        print(f" B∆Ø·ªöC 2: T√≠nh to√°n l∆∞u l∆∞·ª£ng m·ª•c ti√™u qg")
        qg_new = self.calculate_target_inflow(n_k=n_current, n_k_minus_1=n_previous, qg_k_minus_1=qg_previous)

        print(f" B∆Ø·ªöC 3: Ph√¢n b·ªï th√†nh th·ªùi gian ƒë√®n xanh")
        self.distribute_inflow_to_green_times(qg_new, live_queue_lengths)
        
        print(f"{ '='*60}\n")
        return n_current, qg_new, True

def run_perimeter_control_mock_test():
    print("üö¶ B·∫ÆT ƒê·∫¶U M√î PH·ªéNG TH·ª¨ NGHI·ªÜM (MOCK TEST)")
    print("="*70)
    
    try:
        # Ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n, n√™n ƒë∆∞·ªùng d·∫´n t·ªõi config c·∫ßn l√† "src/...."
        controller = PerimeterController(config_file="src/intersection_config.json")
    except Exception as e:
        print(f"\n[L·ªñI] Kh√¥ng th·ªÉ kh·ªüi t·∫°o b·ªô ƒëi·ªÅu khi·ªÉn: {e}")
        print("Vui l√≤ng ki·ªÉm tra file 'src/intersection_config.json' v√† ƒë·∫£m b·∫£o b·∫°n ƒëang ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.")
        return
    
    simulation_data = [
        {'step': 1, 'n_k': 80, 'description': 'Giao th√¥ng b√¨nh th∆∞·ªùng'},
        {'step': 2, 'n_k': 90, 'description': 'L∆∞u l∆∞·ª£ng tƒÉng, g·∫ßn ng∆∞·ª°ng'},
        {'step': 3, 'n_k': 100, 'description': 'V∆∞·ª£t ng∆∞·ª°ng - K√≠ch ho·∫°t'},
        {'step': 4, 'n_k': 110, 'description': 'T·∫Øc ngh·∫Ωn'},
        {'step': 5, 'n_k': 105, 'description': 'B·∫Øt ƒë·∫ßu c·∫£i thi·ªán'},
        {'step': 6, 'n_k': 95, 'description': 'Ti·∫øp t·ª•c gi·∫£m'},
        {'step': 7, 'n_k': 80, 'description': 'D∆∞·ªõi ng∆∞·ª°ng - H·ªßy k√≠ch ho·∫°t'},
        {'step': 8, 'n_k': 75, 'description': 'Tr·ªü l·∫°i b√¨nh th∆∞·ªùng'},
    ]
    
    n_previous = 80.0
    qg_previous = 250.0
    
    print(f"\n TH√îNG TIN M√î PH·ªéNG:")
    print(f"   ‚Ä¢ Ng∆∞·ª°ng m·ª•c ti√™u nÃÇ: {N_HAT} xe")
    print(f"   ‚Ä¢ Kho·∫£ng ƒëi·ªÅu khi·ªÉn: {CONTROL_INTERVAL_S}s")
    print(f"   ‚Ä¢ S·ªë b∆∞·ªõc m√¥ ph·ªèng: {len(simulation_data)} b∆∞·ªõc")
    print("\n" + "="*70)
    
    for data in simulation_data:
        step = data['step']
        n_current = data['n_k']
        description = data['description']
        
        print(f"\n CHU K·ª≤ {step}: {description}")
        
        _, qg_result, _ = controller.run_simulation_step(
            n_current, n_previous, qg_previous
        )
        
        n_previous = n_current
        qg_previous = qg_result
        
        time.sleep(0.5)
    
    print(" K·∫æT TH√öC M√î PH·ªéNG TH·ª¨ NGHI·ªÜM")
    print("="*70)

if __name__ == '__main__':
    run_perimeter_control_mock_test()